import { Controller, Get, Post, Body, Param, Put, Delete, UseGuards } from '@nestjs/common';
import { UsersService } from './users.service';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { AdminAuth } from 'src/auth/decorators/admin.decorator';
import {
    ApiTags,
    ApiOperation,
    ApiResponse,
    ApiBody,
    ApiBearerAuth,
    ApiParam,
    ApiCreatedResponse,
} from '@nestjs/swagger';

@ApiTags('users')
@ApiBearerAuth()
@Controller('users')
export class UsersController {
    constructor(private readonly usersService: UsersService) { }

    @Post()
    @AdminAuth()
    @ApiOperation({ summary: 'Yeni kullanÄ±cÄ± oluÅŸturma (Admin gerektirir)' })
    @ApiCreatedResponse({ description: 'KullanÄ±cÄ± baÅŸarÄ±yla oluÅŸturuldu' })
    @ApiBody({ type: CreateUserDto }) // ğŸ‘ˆ Request body ÅŸemasÄ±
    create(@Body() createUserDto: CreateUserDto) {
        return this.usersService.create(createUserDto);
    }

    @Get()
    @AdminAuth()
    @ApiOperation({ summary: 'TÃ¼m kullanÄ±cÄ±larÄ± listeleme (Admin gerektirir)' })
    @ApiResponse({ status: 200, description: 'KullanÄ±cÄ± listesi' })
    findAll() {
        return this.usersService.findAll();
    }

    @Get(':id')
    @AdminAuth()
    @ApiOperation({ summary: 'ID ile kullanÄ±cÄ± detaylarÄ±nÄ± getirme (Admin gerektirir)' })
    @ApiParam({ name: 'id', description: 'KullanÄ±cÄ± ID' }) // ğŸ‘ˆ Parametre dokÃ¼mantasyonu
    @ApiResponse({ status: 200, description: 'KullanÄ±cÄ± detaylarÄ±' })
    @ApiResponse({ status: 404, description: 'KullanÄ±cÄ± bulunamadÄ±' })
    findOne(@Param('id') id: string) {
        return this.usersService.findOne(+id);
    }

    @Put(':id')
    @AdminAuth()
    @ApiOperation({ summary: 'KullanÄ±cÄ± bilgilerini gÃ¼ncelleme (Admin gerektirir)' })
    @ApiParam({ name: 'id', description: 'KullanÄ±cÄ± ID' })
    @ApiBody({ type: UpdateUserDto }) // ğŸ‘ˆ GÃ¼ncelleme iÃ§in body ÅŸemasÄ±
    @ApiResponse({ status: 200, description: 'KullanÄ±cÄ± baÅŸarÄ±yla gÃ¼ncellendi' })
    update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {
        return this.usersService.update(+id, updateUserDto);
    }

    @Delete(':id')
    @AdminAuth()
    @ApiOperation({ summary: 'KullanÄ±cÄ± silme (Admin gerektirir)' })
    @ApiParam({ name: 'id', description: 'KullanÄ±cÄ± ID' })
    @ApiResponse({ status: 200, description: 'KullanÄ±cÄ± baÅŸarÄ±yla silindi' })
    remove(@Param('id') id: string) {
        return this.usersService.remove(+id);
    }
}