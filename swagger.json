{
  "openapi": "3.0.0",
  "paths": {
    "/users": {
      "post": {
        "operationId": "UsersController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully created"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "AdminKey": []
          }
        ],
        "summary": "Create a new user (Admin required)",
        "tags": [
          "users"
        ]
      },
      "get": {
        "operationId": "UsersController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of users"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "AdminKey": []
          }
        ],
        "summary": "List all users (Admin required)",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "UsersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "AdminKey": []
          }
        ],
        "summary": "Get user details by ID (Admin required)",
        "tags": [
          "users"
        ]
      },
      "put": {
        "operationId": "UsersController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully updated"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "AdminKey": []
          }
        ],
        "summary": "Update user details (Admin required)",
        "tags": [
          "users"
        ]
      },
      "delete": {
        "operationId": "UsersController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully deleted"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "AdminKey": []
          }
        ],
        "summary": "Delete user (Admin required)",
        "tags": [
          "users"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful"
          }
        },
        "summary": "User login",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/check": {
      "get": {
        "operationId": "AuthController_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsUserLogged"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Check is user logged succesfully.",
        "tags": [
          "auth"
        ]
      }
    },
    "/binance/tradingview-webhook": {
      "post": {
        "operationId": "BinanceController_webhook",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenPositionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Position created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FuturesOrderDto"
                }
              }
            }
          }
        },
        "tags": [
          "binance"
        ]
      }
    },
    "/errors/error": {
      "get": {
        "operationId": "ErrorController_find",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "tags": [
          "Error"
        ]
      }
    },
    "/settings": {
      "get": {
        "operationId": "SettingsController_getSettings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current settings",
        "tags": [
          "settings"
        ]
      },
      "put": {
        "operationId": "SettingsController_updateSettings",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Settings successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update settings",
        "tags": [
          "settings"
        ]
      }
    }
  },
  "info": {
    "title": "",
    "description": "",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "https://api.binance-tradingview.qraxiss.com"
    }
  ],
  "components": {
    "securitySchemes": {
      "JWT-auth": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      },
      "AdminKey": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@mail.com",
            "description": "User email address."
          },
          "password": {
            "type": "string",
            "example": "password123!",
            "description": "User password (Min 6 char!)",
            "minLength": 6
          },
          "binanceApiKey": {
            "type": "string",
            "description": "Binance api key!"
          },
          "binanceSecretKey": {
            "type": "string",
            "description": "Binance api key!"
          }
        },
        "required": [
          "email",
          "password",
          "binanceApiKey",
          "binanceSecretKey"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {}
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "User email address"
          },
          "password": {
            "type": "string",
            "example": "yourpassword",
            "description": "User password"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "IsUserLogged": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "example": true,
            "description": "Login status."
          }
        },
        "required": [
          "status"
        ]
      },
      "OpenPositionDto": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "example": "XRPUSDT",
            "description": "Coin pair."
          },
          "side": {
            "type": "string",
            "example": "SELL",
            "description": "Position side"
          }
        },
        "required": [
          "symbol",
          "side"
        ]
      },
      "FuturesOrderDto": {
        "type": "object",
        "properties": {
          "clientOrderId": {
            "type": "string",
            "example": "order123",
            "description": "Client order ID"
          },
          "cumQty": {
            "type": "string",
            "example": "0.001",
            "description": "Cumulative quantity"
          },
          "cumQuote": {
            "type": "string",
            "example": "45.00",
            "description": "Cumulative quote"
          },
          "executedQty": {
            "type": "string",
            "example": "0.001",
            "description": "Executed quantity"
          },
          "orderId": {
            "type": "number",
            "example": 123456,
            "description": "Order ID"
          },
          "avgPrice": {
            "type": "string",
            "example": "45000.00",
            "description": "Average price"
          },
          "origQty": {
            "type": "string",
            "example": "1.0",
            "description": "Original quantity"
          },
          "price": {
            "type": "string",
            "example": "45000.00",
            "description": "Price"
          },
          "reduceOnly": {
            "type": "boolean",
            "example": false,
            "description": "Reduce only flag"
          },
          "side": {
            "type": "string",
            "example": "BUY",
            "description": "Order side"
          },
          "positionSide": {
            "type": "string",
            "example": "BOTH",
            "description": "Position side"
          },
          "status": {
            "type": "string",
            "example": "NEW",
            "description": "Order status"
          },
          "stopPrice": {
            "type": "string",
            "example": "45000.00",
            "description": "Stop price"
          },
          "closePosition": {
            "type": "boolean",
            "example": false,
            "description": "Close position flag"
          },
          "symbol": {
            "type": "string",
            "example": "BTCUSDT",
            "description": "Symbol"
          },
          "timeInForce": {
            "type": "string",
            "example": "GTC",
            "description": "Time in force"
          },
          "type": {
            "type": "string",
            "example": "MARKET",
            "description": "Order type"
          },
          "updateTime": {
            "type": "number",
            "example": 1627891234567,
            "description": "Update time"
          }
        },
        "required": [
          "clientOrderId",
          "cumQty",
          "cumQuote",
          "executedQty",
          "orderId",
          "avgPrice",
          "origQty",
          "price",
          "reduceOnly",
          "side",
          "positionSide",
          "status",
          "stopPrice",
          "closePosition",
          "symbol",
          "timeInForce",
          "type",
          "updateTime"
        ]
      },
      "PaginationResponseDto": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "totalPage": {
            "type": "number"
          }
        },
        "required": [
          "page",
          "limit",
          "total",
          "totalPage"
        ]
      },
      "HttpErrorLocalDto": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/CreateUserDto"
          },
          "code": {
            "type": "number"
          },
          "message": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "additionalMessage": {
            "type": "string",
            "default": false
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "user",
          "code",
          "message",
          "url",
          "name",
          "date",
          "additionalMessage",
          "email"
        ]
      },
      "Errors": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/PaginationResponseDto"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HttpErrorLocalDto"
            }
          }
        },
        "required": [
          "pagination",
          "data"
        ]
      },
      "SettingsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "Settings ID.",
            "default": 1
          },
          "notionalPercentage": {
            "type": "number",
            "example": 5,
            "description": "Notional percentage for settings.",
            "maximum": 100,
            "minimum": 1
          },
          "leverage": {
            "type": "number",
            "example": 10,
            "description": "Leverage for settings."
          },
          "takeProfitPercentage": {
            "type": "number",
            "example": 5,
            "description": "StopLoss percentage for settings.",
            "maximum": 100,
            "minimum": 1
          },
          "stopLossPercentage": {
            "type": "number",
            "example": 5,
            "description": "Notional percentage for settings.",
            "maximum": 100,
            "minimum": 1
          }
        },
        "required": [
          "id",
          "notionalPercentage",
          "leverage",
          "takeProfitPercentage",
          "stopLossPercentage"
        ]
      },
      "UpdateSettingsDto": {
        "type": "object",
        "properties": {
          "notionalPercentage": {
            "type": "number",
            "example": 5,
            "description": "Notional percentage for settings.",
            "maximum": 100,
            "minimum": 1
          },
          "leverage": {
            "type": "number",
            "example": 10,
            "description": "Leverage for settings."
          },
          "takeProfitPercentage": {
            "type": "number",
            "example": 5,
            "description": "TakeProfit percentage for settings.",
            "maximum": 100,
            "minimum": 1
          },
          "stopLossPercentage": {
            "type": "number",
            "example": 5,
            "description": "StopLoss percentage for settings.",
            "maximum": 100,
            "minimum": 1
          }
        },
        "required": [
          "notionalPercentage",
          "leverage",
          "takeProfitPercentage",
          "stopLossPercentage"
        ]
      }
    }
  }
}